import { useState, useEffect } from "react";
import { getEmployees, getPositions, updateEmployee, deleteEmployee, activeEmp, deactiveEmp, exportStaffToExcel } from "../../service/apiStaff";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { Captions, CaptionsOff, DeleteIcon, Edit3 } from "lucide-react";
import { motion } from 'framer-motion'
import { Position, StaffDataFull } from "../../interface/StaffData_interface";
import { Pagination } from "@mui/material";
import RenderNotFound from "../../components/notFound/renderNotFound";
import { FaFileExcel, FaLeaf } from "react-icons/fa";
import axios from "axios";

const CLOUD_NAME = import.meta.env.VITE_CLOUDINARY_CLOUD_NAME;
const UPLOAD_PRESET = import.meta.env.VITE_CLOUDINARY_UPLOAD_PRESET;
const STAFF = import.meta.env.VITE_CLOUDINARY_UPLOAD_STAFF;
const CLOUDINARY_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`

const pageSize = 6;
/**
 * EmployeeList l√† m·ªôt component React ch·ª©c nƒÉng qu·∫£n l√Ω v√† hi·ªÉn th·ªã 
 * danh s√°ch nh√¢n vi√™n. N√≥ cung c·∫•p c√°c ch·ª©c nƒÉng nh∆∞ l·∫•y d·ªØ li·ªáu nh√¢n vi√™n 
 * v√† ch·ª©c v·ª•, ch·ªânh s·ª≠a th√¥ng tin nh√¢n vi√™n, l·ªçc danh s√°ch theo t√™n v√† tr·∫°ng th√°i, 
 * ph√¢n trang, v√† xu·∫•t d·ªØ li·ªáu nh√¢n vi√™n ra file Excel.
 * 
 * Bi·∫øn tr·∫°ng th√°i:
 * - employees: M·ªôt m·∫£ng ch·ª©a d·ªØ li·ªáu nh√¢n vi√™n.
 * - positions: M·ªôt m·∫£ng ch·ª©a d·ªØ li·ªáu ch·ª©c v·ª•.
 * - editingRows: M·ªôt ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ theo d√µi c√°c thay ƒë·ªïi trong d·ªØ li·ªáu nh√¢n vi√™n khi ch·ªânh s·ª≠a.
 * - editMode: M·ªôt ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ theo d√µi nh√¢n vi√™n n√†o ƒëang ƒë∆∞·ª£c ch·ªânh s·ª≠a.
 * - backupData: M·ªôt ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu g·ªëc c·ªßa nh√¢n vi√™n tr∆∞·ªõc khi ch·ªânh s·ª≠a.
 * - searchTerm: M·ªôt chu·ªói ƒë·ªÉ l·ªçc nh√¢n vi√™n theo t√™n.
 * - statusFilter: M·ªôt chu·ªói ƒë·ªÉ l·ªçc nh√¢n vi√™n theo tr·∫°ng th√°i.
 * - currentPage: M·ªôt s·ªë ch·ªâ ƒë·ªãnh trang hi·ªán t·∫°i trong danh s√°ch ph√¢n trang.
 * 
 * Hi·ªáu ·ª©ng:
 * - useEffect ƒë·ªÉ l·∫•y d·ªØ li·ªáu nh√¢n vi√™n v√† ch·ª©c v·ª• khi component ƒë∆∞·ª£c t·∫£i.
 * 
 * Ph∆∞∆°ng th·ª©c:
 * - fetchEmployees: L·∫•y danh s√°ch nh√¢n vi√™n t·ª´ server.
 * - fetchPositions: L·∫•y danh s√°ch ch·ª©c v·ª• t·ª´ server.
 * - handleEditChange: C·∫≠p nh·∫≠t tr·∫°ng th√°i editingRows khi ch·ªânh s·ª≠a d·ªØ li·ªáu nh√¢n vi√™n.
 * - handleEdit: B·∫≠t ch·∫ø ƒë·ªô ch·ªânh s·ª≠a cho m·ªôt nh√¢n vi√™n c·ª• th·ªÉ.
 * - handleCancelEdit: H·ªßy ch·ªânh s·ª≠a cho m·ªôt nh√¢n vi√™n c·ª• th·ªÉ v√† kh√¥i ph·ª•c d·ªØ li·ªáu g·ªëc.
 * - handleSaveEmployee: L∆∞u d·ªØ li·ªáu nh√¢n vi√™n ƒë√£ ch·ªânh s·ª≠a l√™n server.
 * - handleDeleteEmployee: X√≥a m·ªôt nh√¢n vi√™n kh·ªèi server v√† c·∫≠p nh·∫≠t danh s√°ch c·ª•c b·ªô.
 * - handleDeactivate: Ng·ª´ng k√≠ch ho·∫°t m·ªôt nh√¢n vi√™n.
 * - handleActivate: K√≠ch ho·∫°t l·∫°i m·ªôt nh√¢n vi√™n.
 * - exportExcel: Xu·∫•t danh s√°ch nh√¢n vi√™n ra file Excel.
 * - handlePageChange: C·∫≠p nh·∫≠t tr·∫°ng th√°i currentPage ƒë·ªÉ ph√¢n trang.
 */

const EmployeeList = () => {
  const [loading, setLoading] = useState(true);
  const [employees, setEmployees] = useState<StaffDataFull[]>([]);
  const [positions, setPositions] = useState<Position[]>([]);
  const [editingRows, setEditingRows] = useState<{ [key: number]: any }>({});
  const [editMode, setEditMode] = useState<{ [key: number]: boolean }>({});
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [previewImages, setPreviewImages] = useState<{ [key: number]: string }>({});


  useEffect(() => {
    setLoading(true);
    try {
      fetchEmployees();
      fetchPositions();
    } catch (error: unknown) {
      console.error("Error fetching data:", error);
    } finally {
      setLoading(false);
    }

  }, []);
  // L·∫•y danh s√°ch nh√¢n vi√™n
  const fetchEmployees = async () => {
    try {
      const response = await getEmployees();
      setEmployees(response);
    } catch (error) {
      console.error("Error fetching employees:", error);
    }
  };

  // L·∫•y danh s√°ch ch·ª©c v·ª•
  const fetchPositions = async () => {
    try {
      const response = await getPositions();
      setPositions(response);
    } catch (error) {
      console.error("Error fetching positions:", error);
    }
  };

  // Ch·ªânh s·ª≠a th√¥ng tin nh√¢n vi√™n - thay ƒë·ªïi gi√° tr·ªã
  const handleEditChange = async (staffId: number, field: string, value: string | number) => {
    if (field === "status") return;
    setEditingRows((prev) => ({
      ...prev,
      [staffId]: {
        ...prev[staffId],
        [field]: value,
      },
    }))
    await fetchEmployees()
  };

  // Ch·ªçn ƒë·ªÉ ch·ªânh s·ª≠a th√¥ng tin nh√¢n vi√™n
  const handleEdit = (staffId: number) => {
    setEditMode((prev) => ({ ...prev, [staffId]: true }));
  };

  // H·ªßy ch·ªânh s·ª≠a th√¥ng tin nh√¢n vi√™n
  const handleCancelEdit = (staffId: number) => {
    setEditingRows((prev) => {
      const newRows = { ...prev };
      delete newRows[staffId];
      return newRows;
    });
    setEditMode((prev) => ({ ...prev, [staffId]: false }));
  };

  // L∆∞u th√¥ng tin nh√¢n vi√™n ƒë√£ ch·ªânh s·ª≠a
  const handleSaveEmployee = async (staffId: number) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n n√†y kh√¥ng?")) return;
    try {
      const updatedEmployee = employees.find((emp) => emp.staffId === staffId);
      if (!updatedEmployee) return;

      const updatedData = {
        ...updatedEmployee,
        ...editingRows[staffId],
        positionId: editingRows[staffId]?.positionId ?? updatedEmployee.position?.positionId,
        position: {
          ...updatedEmployee.position,
          positionId: editingRows[staffId]?.positionId ?? updatedEmployee.position?.positionId,
        }

      };

      // N·∫øu c√≥ ·∫£nh m·ªõi th√¨ upload l√™n Cloudinary tr∆∞·ªõc
      if (editingRows[staffId]?.imageFile) {
        const formData = new FormData();
        formData.append("file", editingRows[staffId].imageFile);
        formData.append(UPLOAD_PRESET, STAFF);

        try {
          const uploadResponse = await axios.post(
            CLOUDINARY_URL,
            formData
          );

          updatedData.imageUrl = uploadResponse.data.secure_url;
        } catch (error: unknown) {
          console.error("L·ªói khi t·∫£i ·∫£nh l√™n:", error);
          toast.error("L·ªói khi t·∫£i ·∫£nh l√™n, vui l√≤ng th·ª≠ l·∫°i.");
          return;
        }
      }


      await updateEmployee(staffId, updatedData);

      setEmployees((prev) =>
        prev.map((emp) => (emp.staffId === staffId ? { ...updatedData } : emp))
      );

      setEditingRows((prev) => {
        const newRows = { ...prev };
        delete newRows[staffId];
        return newRows;
      });
      await fetchEmployees();
      setEditMode((prev) => ({ ...prev, [staffId]: false }));
      toast.success("C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n th√†nh c√¥ng!");
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n:", error);
      toast.error("C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
    }
  };


  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>, staffId: number) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];

      // Ki·ªÉm tra k√≠ch th∆∞·ªõc ·∫£nh
      if (file.size > 2048576) {
        toast.error("·∫¢nh qu√° l·ªõn! Vui l√≤ng ch·ªçn ·∫£nh d∆∞·ªõi 2MB.");
        return;
      }

      // T·∫°o URL t·∫°m ƒë·ªÉ xem tr∆∞·ªõc ·∫£nh
      const previewUrl = URL.createObjectURL(file);

      setPreviewImages((prev) => ({
        ...prev,
        [staffId]: previewUrl,
      }));

      // L∆∞u file v√†o editingRows (kh√¥ng upload ngay)
      setEditingRows((prev) => ({
        ...prev,
        [staffId]: { ...prev[staffId], imageFile: file }
      }));
    }
  };

  // X√≥a nh√¢n vi√™n
  const handleDeleteEmployee = async (staffId: number) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√¢n vi√™n n√†y kh√¥ng?")) return;
    try {

      const response = await deleteEmployee(staffId);
      setEmployees((prev) => prev.filter((emp) => emp.staffId !== staffId));
      return response;
      toast.success("X√≥a nh√¢n vi√™n th√†nh c√¥ng!");
    } catch (error: unknown) {
      console.error("üî• L·ªói to√†n b·ªô:", error);

      if ((error as { response?: { data?: { code?: number } } }).response?.data?.code === 1006) {
        toast.error("Kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n n√†y ƒëang li√™n quan ƒë·∫øn d·ªãch v·ª• n√†o ƒë√≥!");
      } else {
        const errorMessage = (error as { response?: { data?: { message?: string } } })?.response?.data?.message;
        toast.error(errorMessage || "X√≥a nh√¢n vi√™n th·∫•t b·∫°i!");
      }
    }

  };

  // L·ªçc danh s√°ch nh√¢n vi√™n theo t√™n v√† tr·∫°ng th√°i
  const filteredEmployees = employees.filter((emp) => {
    return (
      emp.name.toLowerCase().includes(searchTerm.toLowerCase()) &&
      (statusFilter === "" || emp.status === statusFilter)
    );
  });

  // Render danh s√°ch nh√¢n vi√™n theo Page
  const paginatedEmployees = filteredEmployees.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );

  const handlePageChange = (_: React.ChangeEvent<unknown>, value: number) => {
    setCurrentPage(value);
  };

  // Deactivate nh√¢n vi√™n
  const handleDeactivate = async (staffId: number) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ng∆∞ng l√†m vi·ªác nh√¢n vi√™n n√†y kh√¥ng?")) return;
    try {
      await deactiveEmp(staffId);
      await fetchEmployees();
      toast.success("Ng∆∞ng l√†m vi·ªác nh√¢n vi√™n th√†nh c√¥ng!");
    } catch (error) {
      console.error("L·ªói khi ng∆∞ng l√†m vi·ªác nh√¢n vi√™n:", error);
      toast.error("Ng∆∞ng l√†m vi·ªác th·∫•t b·∫°i!");
    }
  }

  // Activate nh√¢n vi√™n
  const handleActivate = async (staffId: number) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën k√≠ch ho·∫°t nh√¢n vi√™n n√†y kh√¥ng?")) return;
    try {
      await activeEmp(staffId);
      await fetchEmployees();
      toast.success("K√≠ch ho·∫°t nh√¢n vi√™n th√†nh c√¥ng!");
    } catch (error) {
      console.error("L·ªói khi k√≠ch ho·∫°t nh√¢n vi√™n:", error);
      toast.error("K√≠ch ho·∫°t th·∫•t b·∫°i!");
    }
  }

  // Xu·∫•t excel nh√¢n vi√™n
  const exportExcel = async () => {
    try {
      await exportStaffToExcel();
    } catch (error: unknown) {
      console.log('====================================');
      console.log("L·ªói khi xuat excel", error);
      console.log('====================================');
    }
  }

  if (loading) {
    return <div className="flex flex-col items-center justify-center h-[70vh] gap-y-4">
      <div className="relative h-[100px] w-[100px]">
        <div className="animate-spin rounded-full h-[90px] w-[90px] border-t-2 border-l-2 border-teal-400 absolute"></div>
        <div className="animate-spin rounded-full h-[80px] w-[80px] border-t-2 border-r-2 border-purple-400 absolute top-1 left-1"></div>
        <div className="animate-spin rounded-full h-[70px] w-[70px] border-b-2 border-green-400 absolute top-2 left-2"></div>
        <div className="animate-spin rounded-full h-[70px] w-[70px] border-b-2 border-blue-400 absolute top-2 left-2"></div>
        <div className="animate-spin rounded-full h-[70px] w-[70px] border-b-2 border-red-400 absolute top-2 left-2"></div>
      </div>
      <div className="flex items-center">
        <FaLeaf className="animate-bounce text-green-400 text-xl mr-2" />
        <span className="text-gray-600 text-sm">ƒêang th∆∞ gi√£n v√† t·∫£i d·ªØ li·ªáu...</span>
      </div>
    </div>;
  }


  return (
    <motion.div
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      className="sm:p-6 p-1 sm:mb-4 mb-20 sm:mt-0 mt-10 relative">
      <ToastContainer />
      <h2 className="text-xl sm:text-2xl font-bold mb-6">Danh s√°ch nh√¢n vi√™n üçÉ</h2>
      <div className="flex sm:gap-4 gap-1 mb-2 sm:flex-row">
        <input
          type="text"
          placeholder="T√¨m ki·∫øm theo t√™n..."
          className="border p-4 rounded-full w-full  text-[12px] sm:text-[16px] dark:text-black"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <select
          className="border sm:p-4 p-1 rounded-full text-[12px] sm:text-[16px] dark:text-black"
          value={statusFilter}
          onChange={(e) => setStatusFilter(e.target.value)}
        >
          <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
          <option value="ACTIVATE">Ho·∫°t ƒë·ªông</option>
          <option value="DEACTIVATED">Kh√¥ng ho·∫°t ƒë·ªông</option>
        </select>

      </div>
      <div className="flex items-center justify-end mb-3">
        <button className="flex items-center justify-center sm:gap-2 gap-1 bg-green-500 hover:bg-green-600 text-white sm:p-2 p-1 rounded-lg sm:w-[150px] w-[120px]"
          onClick={exportExcel}
        >
          <FaFileExcel size={20} /> Xu·∫•t excel
        </button>
      </div>
      {employees.length > 0 ? (
        <div className="grid sm:gap-6 gap-2 sm:gap-y-10 gap-y-5 grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
          {paginatedEmployees.map((employee) => (
            <motion.div whileHover={{ scale: 1.02 }} key={employee.staffId} className="bg-white sm:p-4 p-2  rounded-lg shadow-md">

              <div className="mt-4 text-center dark:text-black">
                {editMode[employee.staffId] ? (
                  <>
                    <div className={`bg-emerald-400/20 rounded-t-xl  ${employee.status == 'DEACTIVATED' ? 'bg-red-400/20' : ''}`}>
                      <motion.img
                        whileHover={{ scale: 1.1 }}
                        src={previewImages[employee.staffId] || editingRows[employee.staffId]?.imageUrl || employee.imageUrl}
                        alt="·∫¢nh"
                        className="sm:w-24 sm:h-24 w-16 h-16 mx-auto rounded-full object-cover cursor-pointer outline outline-green-300"
                        onClick={() => document.getElementById(`file-input-${employee.staffId}`)?.click()}
                      />
                      <input
                        type="file"
                        id={`file-input-${employee.staffId}`}
                        className="hidden"
                        accept="image/*"
                        onChange={(e) => handleFileChange(e, employee.staffId)}
                      />
                    </div>


                    <label className="block text-gray-600 sm:text-sm text-[12px] m-1 text-justify">H·ªç v√† t√™n</label>
                    <input
                      className="w-full border p-2 rounded sm:text-sm text-[12px]"
                      value={editingRows[employee.staffId]?.name ?? employee.name}
                      onChange={(e) => handleEditChange(employee.staffId, "name", e.target.value)}
                    />
                    <label className="block text-gray-600 sm:text-sm text-[12px] m-1 text-justify">Email</label>
                    <input
                      className="w-full border p-2 rounded mt-1 sm:text-sm text-[12px]"
                      value={editingRows[employee.staffId]?.email ?? employee.email}
                      onChange={(e) => handleEditChange(employee.staffId, "email", e.target.value)}
                    />
                    <label className="block text-gray-600 sm:text-sm text-[12px] m-1 text-justify">S·ªë ƒëi·ªán tho·∫°i</label>
                    <input
                      className="w-full border p-2 rounded mt-1 sm:text-sm text-[12px]"
                      value={editingRows[employee.staffId]?.phone ?? employee.phone}
                      onChange={(e) => handleEditChange(employee.staffId, "phone", e.target.value)}
                    />
                    <label className="block text-gray-600 sm:text-sm text-[12px] m-1 text-justify">ƒê·ªãa ch·ªâ</label>
                    <input
                      className="w-full border p-2 rounded mt-1 sm:text-sm text-[12px]"
                      value={editingRows[employee.staffId]?.address ?? employee.address}
                      onChange={(e) => handleEditChange(employee.staffId, "address", e.target.value)}
                    />
                    <label className="block text-gray-600 sm:text-sm text-[12px] m-1 text-justify">Ch·ª©c v·ª•</label>
                    <select
                      className="w-full mt-1 border p-2 rounded sm:text-sm text-[12px]"
                      value={editingRows[employee.staffId]?.positionId ?? employee.position?.positionId}
                      onChange={(e) => handleEditChange(employee.staffId, "positionId", Number(e.target.value))}
                    >
                      {positions.map((pos) => (
                        <option key={pos.positionId} value={pos.positionId}>{pos.positionName}</option>
                      ))}
                    </select>
                  </>
                ) : (


                  <div className="sm:text-justify text-left" style={{ lineHeight: "1.9" }}>
                    <div className={`bg-emerald-400/20 rounded-t-xl ${employee.status == 'DEACTIVATED' ? 'bg-red-400/20' : ''}`}>
                      <img src={employee.imageUrl} alt="·∫¢nh" className={`sm:w-24 sm:h-24 w-16 h-16 mx-auto rounded-full object-cover outline outline-green-300 ${employee.status == 'DEACTIVATED' ? 'outline-red-300' : ''}`} />
                    </div>
                    <p className="sm:text-lg text-[13px] mt-4">{employee.name}</p>
                    <p className="sm:text-[14px] text-[12px] text-gray-400 sm:line-clamp-none line-clamp-1">Email: {employee.email}</p>
                    <p className="sm:text-[14px] text-[12px] text-gray-400">S·ªë ƒëi·ªán tho·∫°i: {employee.phone}</p>
                    <p className="sm:text-[14px] text-[12px] text-gray-400">Ng√†y b·∫Øt ƒë·∫ßu: {employee.startDate}</p>
                    <p className="sm:text-[14px] text-[12px] text-gray-400">ƒê·ªãa ch·ªâ: {employee.address}</p>
                    <p className="sm:text-[14px] text-[12px] text-gray-400">Ch∆∞c v·ª•: {employee.position?.positionName}</p>
                  </div>


                )}
                <p className={`mt-2 sm:px-2 sm:py-2 rounded-2xl sm:text-sm text-[12px] ${employee.status === "ACTIVATE" ? "bg-green-100 text-green-600" : "bg-red-100 text-red-600"}`}>
                  <span className="animate-ping" style={{
                    width: "8px",
                    marginRight: "10px",
                    height: "8px",
                    borderRadius: "50%",
                    display: "inline-block",
                    backgroundColor: employee.status === "ACTIVATE" ? "#10B981" : "#EF4444",
                  }}></span>{employee.status === "ACTIVATE" ? "ƒêang l√†m vi·ªác" : "ƒê√£ ngh·ªâ vi·ªác"}
                </p>
                <div className="sm:mt-4 mt-2 flex justify-center gap-2">
                  {editMode[employee.staffId] ? (
                    <>
                      <button onClick={() => handleSaveEmployee(employee.staffId)} className="sm:px-4 sm:py-2 p-2  sm:text-sm text-[12px] bg-blue-200 text-white rounded hover:bg-blue-500">L∆∞u</button>
                      <button onClick={() => handleCancelEdit(employee.staffId)} className="sm:px-4 sm:py-2 p-2  sm:text-sm text-[12px] bg-gray-200 text-white rounded hover:bg-gray-500">Ho√†n T√°c</button>
                    </>
                  ) : (
                    <div className="flex items-center sm:gap-4 gap-2">
                      <button onClick={() => handleEdit(employee.staffId)} className="sm:px-5 sm:py-2 p-1 bg-blue-300 text-white rounded hover:bg-blue-500"><Edit3 className="sm:w-5 sm:h-5 w-4 h-4" /></button>
                      {employee.status === "ACTIVATE" && (
                        <button title="Ng·ª´ng l√†m vi·ªác" onClick={() => handleDeactivate(employee.staffId)} className="sm:px-5 sm:py-2 p-1 bg-orange-200 text-white rounded hover:bg-orange-500"><CaptionsOff className="sm:w-5 sm:h-5 w-4 h-4" /></button>
                      )}

                      {employee.status === "DEACTIVATED" && (
                        <button title="K√≠ch ho·∫°t" onClick={() => handleActivate(employee.staffId)} className="sm:px-5 sm:py-2 p-1 bg-green-200 text-white rounded hover:bg-green-500"><Captions className="sm:w-5 sm:h-5 w-4 h-4" /></button>
                      )}
                      <button onClick={() => handleDeleteEmployee(employee.staffId)} className="sm:px-5 sm:py-2 p-1 bg-red-300 text-white rounded hover:bg-red-500"><DeleteIcon className="sm:w-5 sm:h-5 w-4 h-4" /></button>
                    </div>

                  )}
                </div>
              </div>
            </motion.div>
          ))}
          {filteredEmployees.length === 0 &&
            <div className="text-center text-gray-400 col-span-full mt-10">Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n n√†o!
            </div>}

        </div>
      ) : (
        <RenderNotFound />
      )}

      {
        filteredEmployees.length > pageSize && (
          <div className="flex justify-center mt-6">
            <Pagination
              count={Math.ceil(filteredEmployees.length / pageSize)}
              page={currentPage}
              onChange={handlePageChange}
              color="primary"
            />
          </div>
        )
      }


    </motion.div>
  );
};

export default EmployeeList;